// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Book.proto

#include "Book.pb.h"
#include "Book.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ssor {
namespace boss {

static const char* BookService_method_names[] = {
  "/ssor.boss.BookService/GetBook",
  "/ssor.boss.BookService/ListBooks",
};

std::unique_ptr< BookService::Stub> BookService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BookService::Stub> stub(new BookService::Stub(channel, options));
  return stub;
}

BookService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBook_(BookService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListBooks_(BookService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BookService::Stub::GetBook(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::ssor::boss::Book* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::UInt32Value, ::ssor::boss::Book, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBook_, context, request, response);
}

void BookService::Stub::async::GetBook(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::Book* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::UInt32Value, ::ssor::boss::Book, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, std::move(f));
}

void BookService::Stub::async::GetBook(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::Book* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ssor::boss::Book>* BookService::Stub::PrepareAsyncGetBookRaw(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ssor::boss::Book, ::google::protobuf::UInt32Value, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ssor::boss::Book>* BookService::Stub::AsyncGetBookRaw(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ssor::boss::Book>* BookService::Stub::ListBooksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ssor::boss::Book>::Create(channel_.get(), rpcmethod_ListBooks_, context, request);
}

void BookService::Stub::async::ListBooks(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ssor::boss::Book>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ssor::boss::Book>::Create(stub_->channel_.get(), stub_->rpcmethod_ListBooks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ssor::boss::Book>* BookService::Stub::AsyncListBooksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssor::boss::Book>::Create(channel_.get(), cq, rpcmethod_ListBooks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ssor::boss::Book>* BookService::Stub::PrepareAsyncListBooksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ssor::boss::Book>::Create(channel_.get(), cq, rpcmethod_ListBooks_, context, request, false, nullptr);
}

BookService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BookService::Service, ::google::protobuf::UInt32Value, ::ssor::boss::Book, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BookService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::UInt32Value* req,
             ::ssor::boss::Book* resp) {
               return service->GetBook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BookService::Service, ::google::protobuf::Empty, ::ssor::boss::Book>(
          [](BookService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::ssor::boss::Book>* writer) {
               return service->ListBooks(ctx, req, writer);
             }, this)));
}

BookService::Service::~Service() {
}

::grpc::Status BookService::Service::GetBook(::grpc::ServerContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::Book* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BookService::Service::ListBooks(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::ssor::boss::Book>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ssor
}  // namespace boss

