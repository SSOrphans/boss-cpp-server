// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Book.proto

#include "Book.pb.h"
#include "Book.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace ssor {
namespace boss {

class MockBookServiceStub : public BookService::StubInterface {
 public:
  MOCK_METHOD3(GetBook, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::ssor::boss::Book* response));
  MOCK_METHOD3(AsyncGetBookRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::Book>*(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetBookRaw, ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::Book>*(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(ListBooksRaw, ::grpc::ClientReaderInterface< ::ssor::boss::Book>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request));
  MOCK_METHOD4(AsyncListBooksRaw, ::grpc::ClientAsyncReaderInterface< ::ssor::boss::Book>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncListBooksRaw, ::grpc::ClientAsyncReaderInterface< ::ssor::boss::Book>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

} // namespace ssor
} // namespace boss

