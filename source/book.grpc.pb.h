// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: book.proto
#ifndef GRPC_book_2eproto__INCLUDED
#define GRPC_book_2eproto__INCLUDED

#include "book.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ssor {
namespace boss {

class book_service final {
 public:
  static constexpr char const* service_full_name() {
    return "ssor.boss.book_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::ssor::boss::book* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::book>> Asyncget_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::book>>(Asyncget_bookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::book>> PrepareAsyncget_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::book>>(PrepareAsyncget_bookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ssor::boss::book>> list_books(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ssor::boss::book>>(list_booksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ssor::boss::book>> Asynclist_books(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ssor::boss::book>>(Asynclist_booksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ssor::boss::book>> PrepareAsynclist_books(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ssor::boss::book>>(PrepareAsynclist_booksRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void get_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::book* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::book* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void list_books(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ssor::boss::book>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::book>* Asyncget_bookRaw(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ssor::boss::book>* PrepareAsyncget_bookRaw(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ssor::boss::book>* list_booksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ssor::boss::book>* Asynclist_booksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ssor::boss::book>* PrepareAsynclist_booksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status get_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::ssor::boss::book* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ssor::boss::book>> Asyncget_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ssor::boss::book>>(Asyncget_bookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ssor::boss::book>> PrepareAsyncget_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ssor::boss::book>>(PrepareAsyncget_bookRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ssor::boss::book>> list_books(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ssor::boss::book>>(list_booksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ssor::boss::book>> Asynclist_books(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ssor::boss::book>>(Asynclist_booksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ssor::boss::book>> PrepareAsynclist_books(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ssor::boss::book>>(PrepareAsynclist_booksRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void get_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::book* response, std::function<void(::grpc::Status)>) override;
      void get_book(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::book* response, ::grpc::ClientUnaryReactor* reactor) override;
      void list_books(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ssor::boss::book>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ssor::boss::book>* Asyncget_bookRaw(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ssor::boss::book>* PrepareAsyncget_bookRaw(::grpc::ClientContext* context, const ::google::protobuf::UInt32Value& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ssor::boss::book>* list_booksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::ssor::boss::book>* Asynclist_booksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ssor::boss::book>* PrepareAsynclist_booksRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_book_;
    const ::grpc::internal::RpcMethod rpcmethod_list_books_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_book(::grpc::ServerContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::book* response);
    virtual ::grpc::Status list_books(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::ssor::boss::book>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_book : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_book() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_book() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_book(::grpc::ServerContext* /*context*/, const ::google::protobuf::UInt32Value* /*request*/, ::ssor::boss::book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_book(::grpc::ServerContext* context, ::google::protobuf::UInt32Value* request, ::grpc::ServerAsyncResponseWriter< ::ssor::boss::book>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_books : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_list_books() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_list_books() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_books(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::ssor::boss::book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_books(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::ssor::boss::book>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_book<WithAsyncMethod_list_books<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_get_book : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_book() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::UInt32Value, ::ssor::boss::book>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::UInt32Value* request, ::ssor::boss::book* response) { return this->get_book(context, request, response); }));}
    void SetMessageAllocatorFor_get_book(
        ::grpc::MessageAllocator< ::google::protobuf::UInt32Value, ::ssor::boss::book>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::UInt32Value, ::ssor::boss::book>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_book() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_book(::grpc::ServerContext* /*context*/, const ::google::protobuf::UInt32Value* /*request*/, ::ssor::boss::book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_book(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::UInt32Value* /*request*/, ::ssor::boss::book* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_list_books : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_list_books() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::ssor::boss::book>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request) { return this->list_books(context, request); }));
    }
    ~WithCallbackMethod_list_books() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_books(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::ssor::boss::book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ssor::boss::book>* list_books(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_get_book<WithCallbackMethod_list_books<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_get_book : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_book() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_book() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_book(::grpc::ServerContext* /*context*/, const ::google::protobuf::UInt32Value* /*request*/, ::ssor::boss::book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_books : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_list_books() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_list_books() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_books(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::ssor::boss::book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_book : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_book() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_book() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_book(::grpc::ServerContext* /*context*/, const ::google::protobuf::UInt32Value* /*request*/, ::ssor::boss::book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_book(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_books : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_list_books() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_list_books() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_books(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::ssor::boss::book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_books(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_book : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_book() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_book(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_book() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_book(::grpc::ServerContext* /*context*/, const ::google::protobuf::UInt32Value* /*request*/, ::ssor::boss::book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_book(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_list_books : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_list_books() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->list_books(context, request); }));
    }
    ~WithRawCallbackMethod_list_books() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_books(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::ssor::boss::book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* list_books(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_book : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_book() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::UInt32Value, ::ssor::boss::book>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::UInt32Value, ::ssor::boss::book>* streamer) {
                       return this->Streamedget_book(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_book() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_book(::grpc::ServerContext* /*context*/, const ::google::protobuf::UInt32Value* /*request*/, ::ssor::boss::book* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_book(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::UInt32Value,::ssor::boss::book>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_book<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_list_books : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_list_books() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::ssor::boss::book>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::ssor::boss::book>* streamer) {
                       return this->Streamedlist_books(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_list_books() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_books(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::ssor::boss::book>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedlist_books(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::ssor::boss::book>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_list_books<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_book<WithSplitStreamingMethod_list_books<Service > > StreamedService;
};

}  // namespace boss
}  // namespace ssor


#endif  // GRPC_book_2eproto__INCLUDED
